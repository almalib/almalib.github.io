{"version":3,"sources":["webpack:///src/app/chat-navigate.service.ts","webpack:///src/app/comp/comp-routing.module.ts","webpack:///src/app/comp/comp.component.ts","webpack:///src/app/comp/comp.component.html","webpack:///src/app/comp/comp.module.ts","webpack:///src/app/comp/res/enum/common.enum.ts","webpack:///src/app/comp/res/view/comp-contacts/comp-contacts.component.ts","webpack:///src/app/comp/res/view/comp-contacts/comp-contacts.component.html","webpack:///src/app/comp/res/view/comp-dialogs/comp-dialogs.component.ts","webpack:///src/app/comp/res/view/comp-dialogs/comp-dialogs.component.html","webpack:///src/app/res/directive/lifecycle/lifecycle.directive.ts","webpack:///src/app/res/module/shared.module.ts"],"names":["ChatNavigateService","router","id","navigate","queryParams","contact","open","queryParamsHandling","profile","providedIn","routes","path","pathMatch","data","view","component","redirectTo","CompRoutingModule","forChild","imports","exports","CompComponent","chatStore","chatNavigateService","cdRef","activatedRoute","messages","contacts","allMessages","allDialogs","categories","showProfile","chatViewEnum","chatView","empty","showDialogs","startSyncMessage","subscribe","params","getDialogs","dataFromSever","markForCheck","getContacts","getDialog","parseInt","dialogFromServer","openedDialog","personal","setChatState","online","getCategories","chatActionState","undefined","writing","chatPresenceState","offline","getMessages$","messagesFromServer","getLogo","controlChatProfile","value","dialog","navigateToPersonalChat","message","sendTextMessage","scrollToBot","el","chatMessagesContainer","timer","nativeElement","showDialogsOrDialogsToggle","transform","selector","templateUrl","styleUrls","animations","changeDetection","OnPush","CompModule","declarations","providers","schemas","ChatViewEnum","CompContactsComponent","allContacts","contactsFiltered","theme","filterContacts","lastSearchValue","changes","CompDialogsComponent","openDialog","dialogs","compThemeClass","input","filterChatsByCategory","emit","searchDialogs","LifecycleDirective","afterViewInit","SharedModule"],"mappings":"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","file":"comp-comp-module-es5.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Injectable(\r\n  {\r\n    providedIn: \"root\"\r\n  }\r\n) export class ChatNavigateService {\r\n\r\n  constructor(\r\n    private router: Router\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * */\r\n  public navigateToPersonalChat (\r\n    id: number\r\n  )\r\n  {\r\n    this.router.navigate(\r\n      [`/chat/${id}`]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * */\r\n  public navigateToContact ()\r\n  {\r\n    this.router.navigate(\r\n      [`/chat`],\r\n      {\r\n        queryParams: {\r\n          contact: open ? 'show' : null\r\n        },\r\n        queryParamsHandling: \"merge\"\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * */\r\n  public navigateToChats ()\r\n  {\r\n    this.router.navigate(\r\n      [`/chat`]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * */\r\n  public controlChatProfile (\r\n    id: number,\r\n    open: boolean\r\n  )\r\n  {\r\n    this.router.navigate(\r\n      [`/chat/${id}`],\r\n      {\r\n        queryParams: {\r\n          profile: open ? 'show' : null\r\n        },\r\n        queryParamsHandling: \"merge\"\r\n      }\r\n    );\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\nimport {CompComponent} from \"./comp.component\";\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'chat',\r\n    pathMatch: 'prefix',\r\n    data: {\r\n      view: 'all-chats'\r\n    },\r\n    // runGuardsAndResolvers: \"pathParamsOrQueryParamsChange\",\r\n    component: CompComponent,\r\n    // children: [\r\n    //   {\r\n    //     path: ':chatId',\r\n    //     data: {\r\n    //       view: 'personal'\r\n    //     },\r\n    //     component: CompComponent,\r\n    //   },\r\n    // ]\r\n  },\r\n  {\r\n    path: 'chat/:chatId',\r\n    data: {\r\n      view: 'personal'\r\n    },\r\n    component: CompComponent,\r\n  },\r\n  // {\r\n  //   path: 'contacts',\r\n  //   component: CompComponent,\r\n  // },\r\n  {\r\n    path: '**',\r\n    redirectTo: 'chat'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CompRoutingModule { }\r\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {StoreService} from '../store-service.service';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {animate, state, style, transition, trigger,} from '@angular/animations';\r\nimport {\r\n  ChatCategoryInterface,\r\n  ChatContactInterface,\r\n  ChatDialogInterface,\r\n  ChatMessage,\r\n  ChatUserActionStatusState,\r\n  ChatUserPresenceState,\r\n  filterMessageBySearchValue,\r\n  scrollToBot\r\n} from 'stencil-chat';\r\nimport {ChatViewEnum} from \"./res/enum/common.enum\";\r\nimport {ChatNavigateService} from \"../chat-navigate.service\";\r\n\r\n// import {createTextMessage} from \"../../../../stencil-chat/src\";\r\n\r\n@Component({\r\n  selector: 'app-comp',\r\n  templateUrl: './comp.component.html',\r\n  styleUrls: ['./comp.component.scss'],\r\n  animations: [\r\n    trigger('flyInOut', [\r\n      state('in', style({ transform: 'translateY(0)' })),\r\n      transition('void => *', [\r\n        style({ transform: 'translateY(-100%)' }),\r\n        animate(300),\r\n      ]),\r\n      transition('* => void', [\r\n        animate(300, style({ transform: 'translateY(-100%)' })),\r\n      ]),\r\n    ]),\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CompComponent implements OnInit {\r\n  @ViewChild('chatMessages') chatMessagesContainer: ElementRef<HTMLElement>;\r\n\r\n  /**\r\n   * */\r\n  public messages: ChatMessage[] = [];\r\n\r\n  /**\r\n   * */\r\n  public contacts: ChatContactInterface[] = [];\r\n\r\n  /**\r\n   * */\r\n  public allMessages: ChatMessage[] = [];\r\n\r\n  /**\r\n   * */\r\n  public allDialogs: ChatDialogInterface[] = [];\r\n\r\n  /**\r\n   * */\r\n  public openedDialog: ChatDialogInterface;\r\n\r\n  /**\r\n   * */\r\n  public categories: ChatCategoryInterface[] = [];\r\n\r\n  /**\r\n   * */\r\n  public showProfile = true;\r\n\r\n  /**\r\n   *\r\n   * */\r\n  public chatViewEnum = ChatViewEnum;\r\n\r\n  /**\r\n   *\r\n   * */\r\n  public chatView = ChatViewEnum.empty;\r\n\r\n  /**\r\n   * Стейт для показа контактов или диалогов\r\n   */\r\n  public showDialogs = true;\r\n\r\n  /**\r\n   *\r\n   */\r\n  public chatActionState: ChatUserActionStatusState;\r\n\r\n\r\n  /**\r\n   *\r\n   */\r\n  public chatPresenceState: ChatUserPresenceState;\r\n\r\n  constructor(\r\n    private chatStore: StoreService,\r\n    private chatNavigateService: ChatNavigateService,\r\n    private router: Router,\r\n    private cdRef: ChangeDetectorRef,\r\n    private activatedRoute: ActivatedRoute,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.startSyncMessage();\r\n    this.activatedRoute.data.subscribe(\r\n      (data) => {\r\n      }\r\n    );\r\n\r\n    this.activatedRoute.queryParams.subscribe(\r\n      (params) => {\r\n        this.showProfile = params['profile'] === 'show'\r\n        this.showDialogs = params['contact'] !== 'show'\r\n      }\r\n    )\r\n\r\n\r\n    this.chatStore.getDialogs().subscribe((dataFromSever) => {\r\n      this.allDialogs = dataFromSever;\r\n      this.cdRef.markForCheck();\r\n    });\r\n\r\n    this.chatStore.getContacts().subscribe((dataFromSever) => {\r\n      this.contacts = dataFromSever;\r\n      this.cdRef.markForCheck();\r\n    });\r\n\r\n    this.activatedRoute.params.subscribe(\r\n      (params) => {\r\n        if (params['chatId']) {\r\n          this.chatStore.getDialog(parseInt(params['chatId'] , 10)).subscribe(\r\n            (dialogFromServer) => {\r\n              if (dialogFromServer) {\r\n                this.openedDialog = dialogFromServer;\r\n                this.chatView = ChatViewEnum.personal;\r\n                this.setChatState(dialogFromServer.online);\r\n\r\n                // this.scrollToBot(5000);\r\n                this.cdRef.markForCheck();\r\n              }\r\n            }\r\n          )\r\n        }\r\n      }\r\n    )\r\n\r\n    this.chatStore.getCategories().subscribe((dataFromSever) => {\r\n      this.categories = dataFromSever;\r\n      this.cdRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * */\r\n  private setChatState (\r\n    online: boolean\r\n  )\r\n  {\r\n    this.chatActionState = !online ? undefined : ChatUserActionStatusState.writing;\r\n    this.chatPresenceState = this.chatActionState !== undefined ? ChatUserPresenceState.online : ChatUserPresenceState.offline;\r\n  }\r\n\r\n  private setOnlinePer ()\r\n  {\r\n  }\r\n\r\n  public startSyncMessage (): void\r\n  {\r\n      this.chatStore.getMessages$().subscribe(\r\n        (messagesFromServer) => {\r\n          this.messages = this.allMessages =  messagesFromServer;\r\n          this.cdRef.markForCheck();\r\n        }\r\n      )\r\n  }\r\n\r\n  /**\r\n   * Лого\r\n   */\r\n  public getLogo() {\r\n    return this.chatStore.getLogo();\r\n  }\r\n\r\n  /**\r\n   * Сообщения\r\n   */\r\n  public getMessages() {\r\n    return this.messages;\r\n  }\r\n\r\n  /**\r\n   * Показ профиля юзера\r\n   * @param detail\r\n   */\r\n  public visibleProfile(\r\n    open: boolean\r\n  ) {\r\n    this.chatNavigateService.controlChatProfile(\r\n      this.openedDialog.id,\r\n      open\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  public clickToShowFoldersHandler() {\r\n  }\r\n\r\n  /**\r\n   * Поиск сообщений\r\n   * @param detail\r\n   */\r\n  public searchPersonalMessage(value: string) {\r\n    this.messages = filterMessageBySearchValue(\r\n      value,\r\n      this.allMessages\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Сброс поика сообщений\r\n   */\r\n  public resetMessagesFilter() {\r\n    this.messages = this.allMessages;\r\n  }\r\n  /**\r\n   * Метод для переключения на контакты\r\n   */\r\n  public showDialogsOrDialogsToggle() {\r\n    this.showDialogs = !this.showDialogs;\r\n    // this.chatNavigateService.navigateToContact();\r\n  }\r\n\r\n  /**\r\n   * */\r\n  public navigateToPersonalChat (\r\n    dialog: ChatDialogInterface\r\n  )\r\n  {\r\n    this.chatNavigateService.navigateToPersonalChat(\r\n      dialog.id\r\n    );\r\n    // this.router.navigate(\r\n    //   [`/chat/${id}`]\r\n    // );\r\n  }\r\n\r\n  /**\r\n   * */\r\n  public sendTextMessage (\r\n    message: string\r\n  )\r\n  {\r\n    this.chatStore.sendTextMessage(\r\n      message\r\n    );\r\n    this.scrollToBot();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * */\r\n  public scrollToBot (\r\n    el = this.chatMessagesContainer,\r\n    timer = 50\r\n  )\r\n  {\r\n    scrollToBot(\r\n      el.nativeElement,\r\n      {\r\n        timer: timer\r\n      }\r\n    )\r\n  }\r\n}\r\n","<div class=\"main-wrapper\">\r\n  <main>\r\n    <div class=\"container\">\r\n      <div class=\"row\">\r\n        <div class=\"col-1 white-col\">\r\n          <s-adam-navigate\r\n            (visibleContacts)=\"showDialogsOrDialogsToggle()\"\r\n            [logo]=\"getLogo()\"\r\n          ></s-adam-navigate>\r\n        </div>\r\n        <div class=\"col-3\">\r\n          <app-comp-dialogs\r\n            *ngIf=\"showDialogs\"\r\n            [allDialogs]=\"allDialogs\"\r\n            [categories]=\"categories\"\r\n            (openDialog)=\"navigateToPersonalChat($event)\"\r\n          >\r\n          </app-comp-dialogs>\r\n          <app-comp-contacts\r\n            *ngIf=\"!showDialogs\"\r\n            [contacts]=\"contacts\"\r\n          ></app-comp-contacts>\r\n        </div>\r\n        <div class=\"col white-col\">\r\n          <section class=\"chat\" [ngSwitch]=\"chatView\">\r\n            <s-adam-no-chat *ngSwitchCase=\"chatViewEnum.empty\"></s-adam-no-chat>\r\n            <div\r\n              @flyInOut\r\n              *ngSwitchCase=\"chatViewEnum.personal\"\r\n              class=\"direct-comp\"\r\n            >\r\n              <s-adam-personal-header\r\n                [chatActionState]=\"this.chatActionState\"\r\n                [chatPresenceState]=\"this.chatPresenceState\"\r\n                [openedDialog]=\"openedDialog\"\r\n                (visibleUserProfile)=\"visibleProfile(true)\"\r\n                (searchPersonalMessage)=\"searchPersonalMessage($event.detail)\"\r\n                (resetMessagesFilter)=\"resetMessagesFilter()\">\r\n              </s-adam-personal-header>\r\n              <div class=\"chat-messages\">\r\n                <div class=\"chat-messages-inner\" #chatMessages lifecycle (afterViewInit)=\"this.scrollToBot($event.el)\">\r\n                  <div *ngFor=\"let message of getMessages()\">\r\n                    <message-from [message]=\"message\"></message-from>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <personal-footer (sendTextMessage)=\"sendTextMessage($event.detail)\"></personal-footer>\r\n            </div>\r\n          </section>\r\n        </div>\r\n<!--        @flyInOut-->\r\n        <div class=\"col-3\" *ngIf=\"showProfile\">\r\n          <s-adam-profile (clickToShowDialogs)=\"visibleProfile(false)\" (clickToShowFolders)=\"null\" theme=\"mobile\" [categories]=\"categories\"></s-adam-profile>\r\n        </div>\r\n\r\n        <!--        <user-folders-->\r\n        <!--          clickToUserProfile=\"\"-->\r\n        <!--        createFolder=\"\"-->\r\n        <!--        }-->\r\n        <!--        dialogs=\"\"-->\r\n        <!--        theme={\"comp\"}-->\r\n        <!--        ></user-folders>-->\r\n      </div>\r\n    </div>\r\n  </main>\r\n</div>\r\n","import {CUSTOM_ELEMENTS_SCHEMA, NgModule} from \"@angular/core\";\r\nimport {CompComponent} from \"./comp.component\";\r\nimport {CompContactsComponent} from \"./res/view/comp-contacts/comp-contacts.component\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {CompRoutingModule} from \"./comp-routing.module\";\r\nimport {CompDialogsComponent} from \"./res/view/comp-dialogs/comp-dialogs.component\";\r\nimport {SharedModule} from \"../res/module/shared.module\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CompComponent,\r\n    CompContactsComponent,\r\n    CompDialogsComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    CompRoutingModule,\r\n  ],\r\n  providers: [],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class CompModule {}\r\n","export enum ChatViewEnum {\r\n  personal,\r\n  empty\r\n}\r\n","import {ChangeDetectorRef, Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\r\nimport {ChatContactInterface, filterContactBySearchValue} from 'stencil-chat';\r\nimport { StoreService } from '../../../../store-service.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-comp-contacts',\r\n  templateUrl: './comp-contacts.component.html',\r\n  styleUrls: ['./comp-contacts.component.scss'],\r\n})\r\nexport class CompContactsComponent implements OnInit, OnChanges {\r\n\r\n  @Input() contacts: ChatContactInterface[] = [];\r\n\r\n  /**\r\n   * */\r\n  public allContacts: ChatContactInterface[] = [];\r\n\r\n  constructor(\r\n    private chatStore: StoreService,\r\n    private router: Router,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): Promise<void> | void {\r\n    this.filterContacts(this.lastSearchValue);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // this.allContacts = this.contacts;\r\n    this.allContacts = this.contacts;\r\n    this.filterContacts(this.lastSearchValue);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  public contactsFiltered: ChatContactInterface[] = [];\r\n\r\n  /**\r\n   *\r\n   */\r\n  public lastSearchValue: string;\r\n\r\n  /**\r\n   * Тема для модульного/мобильного чата\r\n   * */\r\n  public theme: 'mobile' | 'module' | 'comp' = 'comp';\r\n\r\n  /**\r\n   *\r\n   */\r\n  public getContacts() {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n\r\n  public disableInnerSearchContactState: boolean;\r\n\r\n  /**\r\n   *\r\n   * */\r\n  public filterContacts(\r\n    value: string\r\n  ) {\r\n    this.contacts = filterContactBySearchValue(\r\n      value,\r\n      this.allContacts\r\n    )\r\n  }\r\n}\r\n","<div class=\"contacts-column\">\r\n  <contacts-list-header\r\n    (searchContact)=\"filterContacts($event.detail)\"\r\n    [theme]=\"theme\"\r\n  ></contacts-list-header>\r\n  <div class=\"contacts\">\r\n    <div *ngFor=\"let dialog of contacts\">\r\n    <contact-card [theme]=\"theme\" [contact]=\"dialog\"></contact-card>\r\n  </div>\r\n</div>\r\n</div>\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component, EventEmitter, Input, OnChanges,\r\n  OnInit, Output, SimpleChanges,\r\n} from '@angular/core';\r\nimport { StoreService } from '../../../../store-service.service';\r\nimport { Router } from '@angular/router';\r\nimport {ChatCategoryInterface, ChatDialogInterface, filterDialogsBySearchValue} from 'stencil-chat';\r\n\r\n@Component({\r\n  selector: 'app-comp-dialogs',\r\n  templateUrl: './comp-dialogs.component.html',\r\n  styleUrls: ['./comp-dialogs.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CompDialogsComponent implements OnInit, OnChanges {\r\n\r\n  /**\r\n   * */\r\n  @Input() categories: ChatCategoryInterface[] = [];\r\n  /**\r\n   * */\r\n  @Input() allDialogs: ChatDialogInterface[] = [];\r\n\r\n  /**\r\n   * */\r\n  @Output() openDialog: EventEmitter<ChatDialogInterface> = new EventEmitter();\r\n\r\n  /**\r\n   * */\r\n  public dialogs: ChatDialogInterface[] = [];\r\n\r\n  /**\r\n   * Тема для модульного/мобильного чата\r\n   * */\r\n  public theme: 'mobile' | 'module' | 'comp' = 'comp';\r\n\r\n  constructor(\r\n    private chatStore: StoreService,\r\n    private router: Router,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.dialogs = this.allDialogs;\r\n  }\r\n\r\n  public compTheme() {\r\n    return this.chatStore.compThemeClass;\r\n  }\r\n\r\n  public searchDialogs(value: string): void {\r\n    this.dialogs = filterDialogsBySearchValue(\r\n      value,\r\n      this.allDialogs\r\n    );\r\n  }\r\n\r\n  /**\r\n   *   клик по кнопке категорий для фильтрации диалогов\r\n   */\r\n  public clickToCategory(input: ChatCategoryInterface) {\r\n    this.dialogs = this.chatStore.filterChatsByCategory(input, this.allDialogs);\r\n  }\r\n\r\n  /**\r\n   * */\r\n  public openChat(dialog: ChatDialogInterface) {\r\n    this.openDialog.emit(\r\n      dialog\r\n    )\r\n  }\r\n}\r\n","<div class=\"contacts-column\">\r\n  <contacts-list-header (searchContact)=\"searchDialogs($event.detail)\"     [theme]=\"theme\"\r\n  ></contacts-list-header>\r\n  <dialog-categories *ngIf=\"categories.length\" (clickToCategory)=\"clickToCategory($event.detail)\" [categories]=\"categories\"></dialog-categories>\r\n  <div class=\"contacts\" >\r\n    <div *ngFor=\"let dialog of dialogs\">\r\n      <dialog-card (clickToDialog)=\"openChat($event.detail)\" [theme]=\"compTheme()\" [mess]=\"dialog\" ></dialog-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {AfterViewInit, Directive, ElementRef, EventEmitter, Output} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[lifecycle]'\r\n})\r\nexport class LifecycleDirective  implements AfterViewInit{\r\n\r\n  @Output('afterViewInit') afterViewInit: EventEmitter<{el: ElementRef}> = new EventEmitter();\r\n\r\n  constructor(\r\n    private el: ElementRef\r\n  ) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.afterViewInit.emit(\r\n      {\r\n        el: this.el\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","import {CUSTOM_ELEMENTS_SCHEMA, NgModule} from \"@angular/core\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {LifecycleDirective} from \"../directive/lifecycle/lifecycle.directive\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LifecycleDirective\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    LifecycleDirective\r\n  ],\r\n  providers: [],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class SharedModule {\r\n\r\n}\r\n"]}